import json
import logging
import asyncio

from aiogram import types
from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode, ChatAction
from aiogram.filters import CommandStart, Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from cache_service import MemCacher
from src.api_service import ProductCompositionAPIService
from src.config import settings
from src.utils import product_to_pretty_str

dp = Dispatcher()
cacher = MemCacher()


#####################################################################

@dp.message(CommandStart())
async def handle_start(message: types.Message):
    text = (
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}.\n"
        f"–Ø —Ä–∞—Å—Å–∫–∞–∂—É —Ç–µ–±–µ –≤—Å—ë –æ —Å–æ—Å—Ç–∞–≤–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —è –∑–Ω–∞—é.\n"
        f"–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ —Ç–µ–±—è"
        f" –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –∏, –µ—Å–ª–∏ —è –Ω–∞–π–¥—É –µ–≥–æ –≤ —Å–≤–æ–µ–π –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π, —è —Ä–∞—Å—Å–∫–∞–∂—É –≤—Å—ë —á—Ç–æ –æ –Ω—ë–º –∑–Ω–∞—é!"
    )
    await message.answer(text=text)

#####################################################################

@dp.message(Command("help"))
async def handle_help(message: types.Message):
    text = (
        "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–∞—á–µ–Ω –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–¥—Å—á—ë—Ç–∞ –∫–∞–ª–ª–æ—Ä–∏–π –∏ –ë–ñ–£.\n\n"
        "–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ —Å–æ—Å—Ç–∞–≤–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ - –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞.\n\n"
        "–ï—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ—Ä—Ü–∏–æ–Ω–Ω–æ - –≤–≤–µ–¥–∏—Ç–µ '/*****'.\n\n"
        "–ï—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π —Ä–∞—Ü–∏–æ–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ä–æ–∫ - –≤–≤–µ–¥–∏—Ç–µ '/*****'."
    )
    await message.answer(text=text)

#####################################################################

@dp.message(~F.text)
async def handle_no_text_message(message: types.Message):
    """Handling all non-text messages"""
    await message.answer(
        text="–ë–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞."
    )

#####################################################################

@dp.message()
async def handle_product(message: types.Message):
    await message.answer(text="–ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥...")
    await message.bot.send_chat_action(
        chat_id=message.chat.id,
        action=ChatAction.TYPING,
    )

    product_service = ProductCompositionAPIService()
    response_json = await product_service.find_products(product_title=message.text)
    items = response_json['items']
    count = response_json['count']
    if count == 0:
        return await message.answer(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ üòü."
        )
    if count == 1:
        return await message.answer(product_to_pretty_str(items[0]))

    keyboard = InlineKeyboardBuilder()
    for product in items:
        keyboard.button(
            text=product['ru_title'],
            callback_data=f"product_{product['id']}"
        )
    keyboard.adjust(1)
    cacher.set_products_data(chat_id=message.chat.id, data=items)
    text = f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {response_json['count']}\n"
    return await message.answer(text=text, reply_markup=keyboard.as_markup(resize_keyboard=True))


@dp.callback_query(lambda c: c.data.startswith('product_'))
async def process_callback(callback_query: types.CallbackQuery):
    message = callback_query.message
    product_id = callback_query.data.split("_")[-1]
    if not product_id.isdigit():
        return await message.answer(text="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
    product_id = int(product_id)
    product = cacher.get_product(chat_id=message.chat.id, product_id=product_id)
    if not product:
        # TODO Think how to implement it the best way.
        #  For example in this case generate a new query to productDetail
        return await message.answer(
            "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∞ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞.\n"
            "–í–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø—Ä–æ—Å –±—ã–ª —Å–¥–µ–ª–∞–Ω —Å–ª–∏—à–∫–æ–º –¥–∞–≤–Ω–æ."
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –µ—â—ë —Ä–∞–∑."
        )
    product_str = product_to_pretty_str(product)
    return await message.answer(text=product_str)

#####################################################################

async def main():
    logging.basicConfig(level=logging.INFO)
    bot = Bot(token=settings.bot_token, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
